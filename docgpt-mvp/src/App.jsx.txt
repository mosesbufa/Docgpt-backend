import React, { useState, useEffect } from 'react';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,
  PieChart, Pie, Cell,
  ResponsiveContainer
} from 'recharts';

const App = () => {
  const [page, setPage] = useState(window.location.hash === '#dashboard' ? 'dashboard' : 'onboarding');

  window.addEventListener('hashchange', () => {
    setPage(window.location.hash === '#dashboard' ? 'dashboard' : 'onboarding');
  });

  return (
    <div>
      {page === 'onboarding' ? (
        <Onboarding onComplete={() => (window.location.hash = 'dashboard')} />
      ) : (
        <Dashboard onLogout={() => (window.location.hash = '')} />
      )}
    </div>
  );
};

// --- Onboarding Component ---
const Onboarding = ({ onComplete }) => {
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    name: '',
    age: '',
    gender: '',
    height: '',
    weight: '',
    conditions: [],
    goals: []
  });

  const healthConditions = [
    "High Blood Pressure", 
    "Diabetes", 
    "Asthma", 
    "Allergies", 
    "Heart Disease", 
    "Thyroid Issues",
    "Mental Health Conditions",
    "Other"
  ];

  const healthGoals = [
    "Weight Management", 
    "Improved Sleep", 
    "Increased Energy", 
    "Stress Reduction", 
    "Better Nutrition", 
    "Increased Physical Activity",
    "Other"
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const toggleCondition = (condition) => {
    setFormData(prev => {
      const newConditions = [...prev.conditions];
      const index = newConditions.indexOf(condition);

      if (index === -1) {
        newConditions.push(condition);
      } else {
        newConditions.splice(index, 1);
      }

      return { ...prev, conditions: newConditions };
    });
  };

  const toggleGoal = (goal) => {
    setFormData(prev => {
      const newGoals = [...prev.goals];
      const index = newGoals.indexOf(goal);

      if (index === -1) {
        newGoals.push(goal);
      } else {
        newGoals.splice(index, 1);
      }

      return { ...prev, goals: newGoals };
    });
  };

  const nextStep = () => setStep(prev => prev + 1);
  const prevStep = () => setStep(prev => prev - 1);

  const handleSubmit = (e) => {
    e.preventDefault();
    onComplete(); // Go to dashboard
  };

  const renderStep = () => {
    switch(step) {
      case 1:
        return (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-6 text-center">Welcome to DocGPT</h2>
            <p className="text-center text-gray-600 mb-8">Let's get to know you better</p>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2" htmlFor="name">Name</label>
              <input type="text" id="name" name="name" value={formData.name} onChange={handleChange}
                     className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2" htmlFor="age">Age</label>
              <input type="number" id="age" name="age" value={formData.age} onChange={handleChange}
                     className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2" htmlFor="gender">Gender</label>
              <select id="gender" name="gender" value={formData.gender} onChange={handleChange}
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="">Select your gender</option>
                <option value="female">Female</option>
                <option value="male">Male</option>
                <option value="non-binary">Non-binary</option>
                <option value="other">Other</option>
                <option value="prefer_not_to_say">Prefer not to say</option>
              </select>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-6 text-center">Health Information</h2>
            <p className="text-center text-gray-600 mb-8">Tell us about your current health status</p>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2" htmlFor="height">Height (cm)</label>
              <input type="number" id="height" name="height" value={formData.height} onChange={handleChange}
                     className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>

            <div className="mb-4">
              <label className="block text-gray-700 font-medium mb-2" htmlFor="weight">Weight (kg)</label>
              <input type="number" id="weight" name="weight" value={formData.weight} onChange={handleChange}
                     className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
          </div>
        );

      case 3:
        return (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-6 text-center">Health Conditions</h2>
            <p className="text-center text-gray-600 mb-8">Do you have any known health conditions?</p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {healthConditions.map(condition => (
                <div key={condition} className="flex items-center">
                  <input type="checkbox" id={condition} checked={formData.conditions.includes(condition)}
                         onChange={() => toggleCondition(condition)} className="h-4 w-4 text-blue-600" />
                  <label htmlFor={condition} className="ml-2 block text-gray-700">{condition}</label>
                </div>
              ))}
            </div>
          </div>
        );

      case 4:
        return (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-6 text-center">Health Goals</h2>
            <p className="text-center text-gray-600 mb-8">What are your health goals?</p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {healthGoals.map(goal => (
                <div key={goal} className="flex items-center">
                  <input type="checkbox" id={goal} checked={formData.goals.includes(goal)}
                         onChange={() => toggleGoal(goal)} className="h-4 w-4 text-blue-600" />
                  <label htmlFor={goal} className="ml-2 block text-gray-700">{goal}</label>
                </div>
              ))}
            </div>
          </div>
        );

      case 5:
        return (
          <div className="mb-8">
            <h2 className="text-2xl font-bold mb-6 text-center">Review & Complete</h2>
            <p className="text-center text-gray-600 mb-8">Review your information before completing setup</p>

            <div className="bg-gray-50 p-4 rounded-lg mb-6">
              <h3 className="font-bold text-lg mb-4">Your Profile Summary</h3>
              <div className="grid grid-cols-2 gap-4">
                <div><p className="text-sm text-gray-500">Name</p><p className="font-medium">{formData.name}</p></div>
                <div><p className="text-sm text-gray-500">Age</p><p className="font-medium">{formData.age}</p></div>
                <div><p className="text-sm text-gray-500">Gender</p><p className="font-medium">{formData.gender}</p></div>
                <div><p className="text-sm text-gray-500">Height</p><p className="font-medium">{formData.height} cm</p></div>
                <div><p className="text-sm text-gray-500">Weight</p><p className="font-medium">{formData.weight} kg</p></div>
              </div>

              <div className="mt-4">
                <p className="text-sm text-gray-500">Health Conditions</p>
                <p className="font-medium">{formData.conditions.length > 0 ? formData.conditions.join(', ') : 'None selected'}</p>
              </div>

              <div className="mt-4">
                <p className="text-sm text-gray-500">Health Goals</p>
                <p className="font-medium">{formData.goals.length > 0 ? formData.goals.join(', ') : 'None selected'}</p>
              </div>
            </div>

            <div className="text-center">
              <p className="text-gray-600 mb-4">Is this information correct?</p>
              <button onClick={handleSubmit}
                      className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300">
                Complete Setup
              </button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {/* Progress bar */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-2">
              {[1, 2, 3, 4, 5].map((stepNumber) => (
                <div key={stepNumber} className={`w-8 h-8 rounded-full flex items-center justify-center ${
                  step >= stepNumber ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'
                }`}>{stepNumber}</div>
              ))}
            </div>
            <div className="relative pt-1">
              <div className="flex mb-2 items-center justify-between">
                <span className="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full bg-blue-200 text-blue-800">
                  Step {step} of 5
                </span>
              </div>
              <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-200">
                <div style={{ width: `${(step / 5) * 100}%` }} className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
              </div>
            </div>
          </div>

          <form onSubmit={(e) => {
            e.preventDefault();
            if (step < 5) setStep(prev => prev + 1);
            else onComplete();
          }}>
            {renderStep()}

            <div className="flex justify-between">
              {step > 1 && (
                <button type="button" onClick={() => setStep(prev => prev - 1)}
                        className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                  Back
                </button>
              )}

              {step < 5 && (
                <button type="submit"
                        className="ml-auto py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                  Next
                </button>
              )}
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

// --- useReminders Hook ---
const useReminders = (logs) => {
  useEffect(() => {
    const today = new Date().toISOString().split('T')[0];
    const lastLogDate = logs[0]?.date;

    // Daily Reminder
    if (lastLogDate !== today) {
      if (!localStorage.getItem('dailyReminderShown_' + today)) {
        alert("👋 Hey! Don't forget to log your health today in DocGPT.");
        localStorage.setItem('dailyReminderShown_' + today, 'true');
      }
    }

    // Weekly Reminder (Sunday)
    const isSunday = new Date().getDay() === 0;
    if (isSunday) {
      const thisWeek = new Date().toISOString().slice(0, 10);
      if (!localStorage.getItem('weeklyReminderShown_' + thisWeek)) {
        alert("📊 It's Sunday! Time to check your weekly summary and get advice from DocGPT.");
        localStorage.setItem('weeklyReminderShown_' + thisWeek, 'true');
      }
    }

    // Cleanup old reminders after 7 days
    const clearOldReminders = () => {
      Object.keys(localStorage).forEach((key) => {
        if (key.startsWith('dailyReminderShown_') || key.startsWith('weeklyReminderShown_')) {
          const dateStr = key.split('_')[1];
          const date = new Date(dateStr);
          const now = new Date();
          const diff = Math.floor((now - date) / (1000 * 60 * 60 * 24));
          if (diff > 7) localStorage.removeItem(key);
        }
      });
    };

    clearOldReminders();

  }, [logs]);
};

// --- Dashboard Component with Charts & GPT Feedback ---
const Dashboard = ({ onLogout }) => {
  const [logs, setLogs] = useState([]);
  const [newLog, setNewLog] = useState({
    date: new Date().toISOString().split('T')[0],
    sleep: '',
    steps: '',
    meals: '',
    mood: 'neutral',
    symptoms: ''
  });
  const [gptResponse, setGptResponse] = useState('');
  const [weeklySummary, setWeeklySummary] = useState(null);
  const [weeklyAdvice, setWeeklyAdvice] = useState('');

  useReminders(logs);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewLog(prev => ({ ...prev, [name]: value }));
  };

  const submitLog = async (e) => {
    e.preventDefault();
    const updatedLog = { ...newLog, id: Date.now() };
    setLogs(prev => [updatedLog, ...prev]);
    await callDocGPT(updatedLog);
    setNewLog({
      date: new Date().toISOString().split('T')[0],
      sleep: '',
      steps: '',
      meals: '',
      mood: 'neutral',
      symptoms: ''
    });
  };

  const getThisWeeksLogs = () => {
    const today = new Date();
    const dayOfWeek = today.getDay();
    const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Monday start
    const firstDayOfWeek = new Date(today.setDate(diff));

    return logs.filter(log => {
      const logDate = new Date(log.date);
      return logDate >= firstDayOfWeek && logDate <= new Date();
    });
  };

  const generateWeeklySummary = () => {
    const weekLogs = getThisWeeksLogs();

    if (weekLogs.length < 3) {
      setWeeklySummary(null);
      setWeeklyAdvice('');
      return;
    }

    const totalSleep = weekLogs.reduce((sum, log) => sum + parseFloat(log.sleep), 0);
    const avgSleep = (totalSleep / weekLogs.length).toFixed(1);

    const totalSteps = weekLogs.reduce((sum, log) => sum + parseInt(log.steps || 0, 10), 0);

    const moodCount = {};
    weekLogs.forEach(log => {
      moodCount[log.mood] = (moodCount[log.mood] || 0) + 1;
    });
    const commonMood = Object.keys(moodCount).reduce((a, b) => moodCount[a] > moodCount[b] ? a : b);

    const symptoms = [];
    weekLogs.forEach(log => {
      if (log.symptoms) {
        const cleanedSymptoms = log.symptoms
          .toLowerCase()
          .replace(/[^\w\s]/g, '')
          .split(/[\s,]+/);
        symptoms.push(...cleanedSymptoms);
      }
    });

    const symptomFrequency = symptoms.reduce((acc, s) => {
      acc[s] = (acc[s] || 0) + 1;
      return acc;
    }, {});

    const summary = {
      avgSleep,
      totalSteps,
      commonMood,
      symptoms: [...new Set(symptoms)],
      symptomFrequency
    };

    setWeeklySummary(summary);
    setWeeklyAdvice('');
  };

  const callDocGPT = async (log) => {
    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions ", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer 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"
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [
            {
              role: "system",
              content: "You are a friendly health advisor AI helping users live healthier lives by analyzing their daily health logs."
            },
            {
              role: "user",
              content: `Here is my health log for today:\nDate: ${log.date}\nSleep: ${log.sleep} hours\nSteps: ${log.steps}\nMeals: ${log.meals}\nMood: ${log.mood}\nSymptoms: ${log.symptoms}\n\nCan you give me some health advice or suggestions based on this?`
            }
          ]
        })
      });

      const data = await response.json();
      const reply = data.choices?.[0]?.message?.content || "No response from DocGPT.";
      setGptResponse(reply);
    } catch (error) {
      setGptResponse("Error getting feedback from DocGPT.");
    }
  };

  const callWeeklyDocGPT = async () => {
    if (!weeklySummary) return;

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions ", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer 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"
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [
            {
              role: "system",
              content: "You are a helpful AI doctor summarizing weekly health trends."
            },
            {
              role: "user",
              content: `Here is my weekly health: I averaged ${weeklySummary.avgSleep} hours of sleep, walked ${weeklySummary.totalSteps.toLocaleString()} steps, felt ${weeklySummary.commonMood} most days, and experienced symptoms like ${Object.keys(weeklySummary.symptomFrequency).join(', ')}. Can you provide feedback or recommendations?`
            }
          ]
        })
      });

      const data = await response.json();
      const reply = data.choices?.[0]?.message?.content || "No response from DocGPT.";
      setWeeklyAdvice(reply);
    } catch (error) {
      setWeeklyAdvice("Error getting weekly feedback from DocGPT.");
    }
  };

  useEffect(() => {
    generateWeeklySummary();
  }, [logs]);

  const moodEmojiMap = {
    happy: '😄',
    neutral: '😐',
    sad: '😢',
    stressed: '😫'
  };

  const moodColorMap = {
    happy: '#48BB78',
    neutral: '#F6AD55',
    sad: '#667EEA',
    stressed: '#E53E3E'
  };

  const symptomArray = Object.entries(weeklySummary?.symptomFrequency || {}).map(([name, count]) => ({ name, count }));

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold">DocGPT Dashboard</h1>
          <button onClick={onLogout} className="text-blue-600 hover:text-blue-800">Logout</button>
        </div>

        {/* Log Form */}
        <div className="bg-white p-6 rounded-lg shadow mb-8">
          <h2 className="text-xl font-semibold mb-4">Log Today's Health Data</h2>
          <form onSubmit={submitLog} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-gray-700 font-medium mb-1" htmlFor="date">Date</label>
                <input type="date" id="date" name="date" value={newLog.date} onChange={handleChange}
                       className="w-full px-4 py-2 border border-gray-300 rounded" required />
              </div>
              <div>
                <label className="block text-gray-700 font-medium mb-1" htmlFor="sleep">Sleep (hours)</label>
                <input type="number" id="sleep" name="sleep" value={newLog.sleep} onChange={handleChange}
                       className="w-full px-4 py-2 border border-gray-300 rounded" required />
              </div>
              <div>
                <label className="block text-gray-700 font-medium mb-1" htmlFor="steps">Steps Walked</label>
                <input type="number" id="steps" name="steps" value={newLog.steps} onChange={handleChange}
                       className="w-full px-4 py-2 border border-gray-300 rounded" required />
              </div>
              <div>
                <label className="block text-gray-700 font-medium mb-1" htmlFor="mood">Mood</label>
                <select id="mood" name="mood" value={newLog.mood} onChange={handleChange}
                        className="w-full px-4 py-2 border border-gray-300 rounded">
                  <option value="happy">😄 Happy</option>
                  <option value="neutral">😐 Neutral</option>
                  <option value="sad">😢 Sad</option>
                  <option value="stressed">😫 Stressed</option>
                </select>
              </div>
            </div>

            <div>
              <label className="block text-gray-700 font-medium mb-1" htmlFor="meals">Meals</label>
              <textarea id="meals" name="meals" value={newLog.meals} onChange={handleChange}
                        rows="2" className="w-full px-4 py-2 border border-gray-300 rounded"
                        placeholder="Describe what you ate today..."></textarea>
            </div>

            <div>
              <label className="block text-gray-700 font-medium mb-1" htmlFor="symptoms">Symptoms or Notes</label>
              <textarea id="symptoms" name="symptoms" value={newLog.symptoms} onChange={handleChange}
                        rows="2" className="w-full px-4 py-2 border border-gray-300 rounded"
                        placeholder="E.g. headache, tired, etc."></textarea>
            </div>

            <button type="submit" className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
              Save Log
            </button>
          </form>
        </div>

        {/* Daily GPT Feedback */}
        {gptResponse && (
          <div className="bg-white p-6 rounded-lg shadow mb-6">
            <h2 className="text-xl font-semibold mb-2">DocGPT Suggests:</h2>
            <p className="whitespace-pre-line text-gray-800">{gptResponse}</p>
          </div>
        )}

        {/* Weekly Summary Section */}
        <div className="mb-8">
          {!logs.length ? (
            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-lg shadow">
              <p className="text-yellow-800">
                No logs yet. Start logging your health to see your weekly summary.
              </p>
            </div>
          ) : (
            <>
              <h2 className="text-xl font-semibold mb-4">Health Overview</h2>

              {/* Sleep & Steps Chart */}
              <div className="bg-white p-6 rounded-lg shadow mb-6">
                <h3 className="font-semibold mb-4">Sleep & Steps Trends</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={logs}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" />
                    <YAxis yAxisId="left" label={{ value: 'Hours', angle: -90, position: 'insideLeft' }} />
                    <YAxis yAxisId="right" orientation="right" label={{ value: 'Steps', angle: 90, position: 'insideRight' }} />
                    <Tooltip />
                    <Legend />
                    <Bar yAxisId="left" name="Sleep (hrs)" dataKey="sleep" fill="#48BB78" />
                    <Bar yAxisId="right" name="Steps" dataKey="steps" fill="#4F46E5" />
                  </BarChart>
                </ResponsiveContainer>
              </div>

              {/* Mood Distribution */}
              <div className="bg-white p-6 rounded-lg shadow mb-6">
                <h3 className="font-semibold mb-4">Mood Distribution</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                    <Pie
                      data={Object.entries(moodEmojiMap).map(([key, emoji]) => ({
                        name: key, value: logs.filter(d => d.mood === key).length, emoji
                      })}
                      dataKey="value"
                      nameKey="name"
                      cx="50%"
                      cy="50%"
                      outerRadius={80}
                      fill="#8884d8"
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                    >
                      {Object.keys(moodEmojiMap).map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={moodColorMap[entry]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>

              {/* Symptom Frequency */}
              <div className="bg-white p-6 rounded-lg shadow mb-6">
                <h3 className="font-semibold mb-4">Symptom Frequency</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={symptomArray}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="count" fill="#E53E3E" />
                  </BarChart>
                </ResponsiveContainer>
              </div>

              {/* Weekly Advice Button */}
              <div className="bg-white p-6 rounded-lg shadow mb-6">
                <button
                  onClick={callWeeklyDocGPT}
                  className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded"
                >
                  Ask DocGPT for Weekly Advice
                </button>

                {weeklyAdvice && (
                  <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <h3 className="font-semibold mb-2">Weekly Health Advice:</h3>
                    <p className="whitespace-pre-line text-gray-800">{weeklyAdvice}</p>
                  </div>
                )}
              </div>
            </>
          )}
        </div>

        {/* Logs History */}
        {logs.length > 0 && (
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">Your Health Logs</h2>
            <div className="space-y-4">
              {logs.slice(0, 5).map(log => (
                <div key={log.id} className="border border-gray-200 p-4 rounded">
                  <div className="flex justify-between">
                    <strong>{log.date}</strong>
                    <span>Mood: {log.mood}</span>
                  </div>
                  <p>Sleep: {log.sleep} hrs | Steps: {log.steps}</p>
                  <p>Meals: {log.meals || 'Not recorded'}</p>
                  <p>Symptoms: {log.symptoms || 'None reported'}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;